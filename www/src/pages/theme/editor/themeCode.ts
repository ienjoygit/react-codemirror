import { CreateThemeOptions } from '@uiw/codemirror-themes';
import { Style } from './';

export const defalutStyle: Style = {
  comment: '#787b8099',
  lineComment: '',
  blockComment: '',
  docComment: '',
  name: '',
  typeDefinition: '#194a7b',
  typeName: '#194a7b',
  tagName: '#008a02',
  variableName: '#0080ff',
  propertyName: '#6a58ad',
  attributeName: '#5a00a3',
  className: '#5c6166',
  labelName: '',
  namespace: '',
  macroName: '',
  literal: '',
  string: '#e71818',
  docString: '',
  character: '',
  attributeValue: '',
  number: '#a600ff',
  integer: '',
  float: '',
  bool: '#5c6166',
  regexp: '',
  escape: '',
  color: '',
  url: '',
  keyword: '#3500f5',
  self: '',
  null: '#5c6166',
  atom: '',
  unit: '',
  modifier: '',
  operatorKeyword: '',
  controlKeyword: '',
  definitionKeyword: '',
  moduleKeyword: '',
  operator: '#5c6166',
  derefOperator: '',
  arithmeticOperator: '',
  logicOperator: '',
  bitwiseOperator: '',

  brace: '#0080ff',
  angleBracket: '#0061c2',

  compareOperator: '',
  updateOperator: '',
  definitionOperator: '',
  typeOperator: '',
  controlOperator: '',
  punctuation: '',
  separator: '',
  bracket: '',
  squareBracket: '',
  paren: '',
  content: '',
  heading: '',
  heading1: '',
  heading2: '',
  heading3: '',
  heading4: '',
  heading5: '',
  heading6: '',
  contentSeparator: '',
  list: '',
  quote: '',
  emphasis: '',
  strong: '',
  link: '',
  monospace: '',
  strikethrough: '',
  inserted: '',
  deleted: '',
  changed: '',
  invalid: '',
  meta: '',
  documentMeta: '',
  annotation: '',
  processingInstruction: '',
};

export type ThmeCodeStyle = Style & CreateThemeOptions['settings'] & { dark: CreateThemeOptions['dark'] };

export const thmeCode = (styles: Partial<ThmeCodeStyle> = {}) => `import CodeMirror from '@uiw/react-codemirror';
import { createTheme } from '@uiw/codemirror-themes';
import { javascript } from '@codemirror/lang-javascript';
import { tags as t } from '@lezer/highlight';

const myTheme = createTheme({
  dark: '${styles.dark}',
  settings: {
    background: '${styles.background}',
    foreground: '${styles.foreground}',
    caret: '${styles.caret}',
    selection: '${styles.selection}',
    lineHighlight: '${styles.lineHighlight}',
    gutterBackground: '${styles.gutterBackground}',
    gutterForeground: '${styles.gutterForeground}',
  },
  styles: [
    { tag: t.comment, color: '${styles.comment}' },
    { tag: t.lineComment, color: '${styles.lineComment}' },
    { tag: t.blockComment, color: '${styles.blockComment}' },
    { tag: t.docComment, color: '${styles.docComment}' },
    { tag: t.name, color: '${styles.name}' },
    { tag: t.definition(t.typeName), color: '${styles.typeDefinition}' },
    { tag: t.typeName, color: '${styles.typeName}' },
    { tag: t.tagName, color: '${styles.tagName}' },
    { tag: t.variableName, color: '${styles.variableName}' },
    { tag: t.propertyName, color: '${styles.propertyName}' },
    { tag: t.attributeName, color: '${styles.attributeName}' },
    { tag: t.className, color: '${styles.className}' },
    { tag: t.labelName, color: '${styles.labelName}' },
    { tag: t.namespace, color: '${styles.namespace}' },
    { tag: t.macroName, color: '${styles.macroName}' },
    { tag: t.literal, color: '${styles.literal}' },
    { tag: t.string, color: '${styles.string}' },
    { tag: t.docString, color: '${styles.docString}' },
    { tag: t.character, color: '${styles.character}' },
    { tag: t.attributeValue, color: '${styles.attributeValue}' },
    { tag: t.number, color: '${styles.number}' },
    { tag: t.integer, color: '${styles.integer}' },
    { tag: t.float, color: '${styles.float}' },
    { tag: t.bool, color: '${styles.bool}' },
    { tag: t.regexp, color: '${styles.regexp}' },
    { tag: t.escape, color: '${styles.escape}' },
    { tag: t.color, color: '${styles.color}' },
    { tag: t.url, color: '${styles.url}' },
    { tag: t.keyword, color: '${styles.keyword}' },
    { tag: t.self, color: '${styles.self}' },
    { tag: t.null, color: '${styles.null}' },
    { tag: t.atom, color: '${styles.atom}' },
    { tag: t.unit, color: '${styles.unit}' },
    { tag: t.modifier, color: '${styles.modifier}' },
    { tag: t.operatorKeyword, color: '${styles.operatorKeyword}' },
    { tag: t.controlKeyword, color: '${styles.controlKeyword}' },
    { tag: t.definitionKeyword, color: '${styles.definitionKeyword}' },
    { tag: t.moduleKeyword, color: '${styles.moduleKeyword}' },
    { tag: t.operator, color: '${styles.operator}' },
    { tag: t.derefOperator, color: '${styles.derefOperator}' },
    { tag: t.arithmeticOperator, color: '${styles.arithmeticOperator}' },
    { tag: t.logicOperator, color: '${styles.logicOperator}' },
    { tag: t.bitwiseOperator, color: '${styles.logicOperator}' },
    { tag: t.special(t.brace), color: '${styles.brace}' },
    { tag: t.compareOperator, color: '${styles.compareOperator}' },
    { tag: t.updateOperator, color: '${styles.updateOperator}' },
    { tag: t.definitionOperator, color: '${styles.definitionOperator}' },
    { tag: t.typeOperator, color: '${styles.typeOperator}' },
    { tag: t.controlOperator, color: '${styles.controlOperator}' },
    { tag: t.punctuation, color: '${styles.punctuation}' },
    { tag: t.separator, color: '${styles.separator}' },
    { tag: t.bracket, color: '${styles.bracket}' },
    { tag: t.angleBracket, color: '${styles.angleBracket}' },
    { tag: t.squareBracket, color: '${styles.squareBracket}' },
    { tag: t.paren, color: '${styles.paren}' },
    { tag: t.brace, color: '${styles.brace}' },
    { tag: t.content, color: '${styles.content}' },
    { tag: t.heading, color: '${styles.heading}' },
    { tag: t.heading1, color: '${styles.heading1}' },
    { tag: t.heading2, color: '${styles.heading2}' },
    { tag: t.heading3, color: '${styles.heading3}' },
    { tag: t.heading4, color: '${styles.heading4}' },
    { tag: t.heading5, color: '${styles.heading5}' },
    { tag: t.heading6, color: '${styles.heading6}' },
    { tag: t.contentSeparator, color: '${styles.contentSeparator}' },
    { tag: t.list, color: '${styles.list}' },
    { tag: t.quote, color: '${styles.quote}' },
    { tag: t.emphasis, color: '${styles.emphasis}' },
    { tag: t.strong, color: '${styles.strong}' },
    { tag: t.link, color: '${styles.link}' },
    { tag: t.monospace, color: '${styles.monospace}' },
    { tag: t.strikethrough, color: '${styles.strikethrough}' },
    { tag: t.inserted, color: '${styles.inserted}' },
    { tag: t.deleted, color: '${styles.deleted}' },
    { tag: t.changed, color: '${styles.changed}' },
    { tag: t.invalid, color: '${styles.invalid}' },
    { tag: t.meta, color: '${styles.meta}' },
    { tag: t.documentMeta, color: '${styles.documentMeta}' },
    { tag: t.annotation, color: '${styles.annotation}' },
    { tag: t.processingInstruction, color: '${styles.processingInstruction}' },
  ],
});

function App() {
  return (
    <CodeMirror
      value="console.log('hello world!');"
      height="200px"
      theme={myTheme}
      extensions={[javascript({ jsx: true })]}
      onChange={(value, viewUpdate) => {
        console.log('value:', value);
      }}
    />
  );
}
export default App;`;
